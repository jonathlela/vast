

VAST C++ 0.4.6
--------------
2010/06/22      C# sample program added (calling C wrapper class VASTWrapperC)
2010/06/18      C wrapper class (VASTWrapperC) and test program (demo_console_C) added



VAST C++ 0.4.5  (Linux-tested, VAST Firefox plugin added)
--------------
2010/06/08      VAST Firefox plugin (npvast) to work with 0.4.5

2010/06/03      modify basic types in /common/VASTTypes.h to specify explicitly number of bytes used
                so that Win32 and Linux build may communicate across network correctly

                
VAST C++ 0.4.4  (Voronoi Self-organizing Overlay, VSOPeer added)
--------------
2010/04/26      This is a major re-structure of VAST, where VON is no longer used directly, but only 
                between certain super-peers. Spatial Publish Subscribe (SPS) functions are still supported,
                so the main features of VAST remain unchanged. The basic mechanism of VAST now is divided 
                between the roles of Clients (users), Relays (super-peers that receive and forward messages
                to Clients), and Matchers (super-peers that manage the subscription info of Clients, and 
                match up publications with subscribers). The regions managed by Matchers would dynamically
                adjust themselves via a self-organizing mechanism (called Voronoi Self-Organization, or VSO)



VAST C++ 0.4.2  (1st functional VASTATE, supporting state management)
--------------
2010/01/15      add first functional version of VASTATE, which provides the
                creation, destruction, and update for coordinate-based game objects
                with dynamic load balancing (via Voronoi diagrams), basic fault tolerance, and
                consistency control.

                this version is used as the basis for the virtual world application Plug ver 0.1


VAST C++ 0.4.0  (Spatial Publish Subscribe, SPS support)
--------------
2009/08/03      extract VON functions into VONpeer class
                provide Spatial Publish Subscribe (SPS) functions via a client-relay architecture
                partial implementation of VASTATE (supporting Voronoi State Managment, VSM)

                this version was used to generate the simulation results for a paper submission


VAST C++ 0.3.3  (new movement models, VASTutil class)
--------------
2007/12/24      extract common functions into VASTutil class, including logger, movement models

                cluster movement added (as part of VASTutil class)
                group movement added   (as part of VASTutil class)
                adopted from OverSim (http://www.oversim.org/) sourcecode

                VASTsim has very poor consistency in 10,000x10,000 world with 500 nodes.
                solve this problem by requiring all nodes to properly join before movement

VAST C++ 0.3.2  (bandwidth-limited emulator, ID separation)
--------------
2007/04/19      add a new bandwidth-limited emulation network layer, NET_EMULATED_BL

                network interface change,
                    move sendsize / recvsize in,
                    add sendsize_by_msgtype / recvsize_by_msgtype,

                introduce flush() to the VAST interface (reliable send does not occur immediately)
                bug fix when terminating VAST

                VASTATE (VAST State Management) is also included in this distribution, however,
                as they're still under development no functionality is currently documented.

2007/03/22      add a new buffering class 'vastbuf' for VAST, which allows messages of unlimited size
                be sent and received (constrained by only by memory)

2007/01/15      separate unique ID assignment from VAST, now VAST does not handle ID assignments,
                but a 'vastid' class is introduced and can be used for centralized ID assignments.

                move all build files into a '/build' directory


VAST C++ 0.3.1  (ACE_DISABLED fix)
--------------
2006/11/21      bug fix for the ACE_DISABLE flag in include/config.h
                store all *.dll *.lib files into /lib directory
2006/11/14      bug fix for loopback message (message sent to self) in net_ace.cpp


VAST C++ 0.3.0  (Forwarding Model)
--------------
2006/10/04      VON Forwarding Model and "zlib" compression library added
2006/09/19      convert project files to VC.net2003
2006/09/08      directory re-structure. "errout" module added (for printing debug messages).
2006/07/28      revise net_emu to solve an ordering issue. Messages are now handled by
                a multimap with timestep as index, as opposed to the linklist.


VAST C++ 0.2.1
--------------
2006/05/30      added "gateway" node, compilable under Linux
2006/04/05      revise the stat collection mechanism, time-series of all data are now recorded
2006/04/03      rename the VAST node factory class 'metaverse' to 'vastverse'
2006/03/20      change the record for node positions in VASTsim from text to binary format
                (also change the log filename from *.txt to *.pos)
2006/03/19      change the memory allocation of SFVoronoi from static to dynamic
                (to support more nodes during simulation)

VAST C++ 0.2.0
--------------
2006/03/15      demo program "chatva" completed
2006/03/10      UDP support added (for movement and neighbor discovery messages, MOVE & NODE)
2006/02/17      multiple clients connectable using real networks based on ACE (TCP only)
2006/02/06      re-organized directory structures and inclusion of the ACE library

                OLD                 NEW
                ===                 ===
                include, src        vast
                src_sim             vastsim
                src_test            demo
                